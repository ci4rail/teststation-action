name: "Teststation test"
description: "Run a test on test station"
inputs:
  pipeline-name:
    description: "A name identifying the calling pipeline"
    required: true
  mqtt-broker-url:
    description: "URL of MQTT broker where test station listens to (ip:port or proto://ip:port, e.g. tcp://192.168.24.64:1833)"
    required: true
  master-topic:
    description: "request is published to <master-topic>/request"
    required: false
    default: "teststation"
  test-name:
    description: "Name of the test to execute (as listed in the schedulers config file)"
    required: true
  artifact-override:
    description: "artifact to test"
    required: true
  request-timeout:
    description: "Time in seconds to wait for teststation to become available"
    required: false
    default: "3600"
  access-token:
    description: "Personal access token for private repos"
    required: true
  tailscale-key:
    description: "a reusable & emphermeral yoda tailscale key"
    required: true
  requester-version:
    description: "tag of requester to use"
    required: false
    default: "v4.4.0"

secrets:
  minio_access_key:
    required: true
  minio_secret_key:
    required: true


runs:
  using: "composite"
  steps:
    # Add action's path so that scripts can be found
    - run: echo "${{ github.action_path }}" >> $GITHUB_PATH
      shell: bash
    - name: fetch requester
      uses: dsaltares/fetch-gh-release-asset@master
      with:
        repo: "ci4rail/test-scheduler"
        version: "tags/${{ inputs.requester-version }}"
        file: "test-requester-${{ inputs.requester-version }}-linux-amd64.tar.gz"
        token: ${{ inputs.access-token }}
    - name: Tailscale
      uses: tailscale/github-action@v1
      with:
        authkey: ${{ inputs.tailscale-key }}
    - name: Run Test
      id: run_test
      shell: bash
      continue-on-error: true  # continue on error to upload logs
      run: |
        generate-request.py "${{ inputs.pipeline-name }}" "${{ inputs.test-name }}" "${{ inputs.artifact-override }}" > request.json
        cat request.json
        tar xzf test-requester-${{ inputs.requester-version }}-linux-amd64.tar.gz test-requester
        chmod +x test-requester && mv test-requester "${{ github.action_path }}"

        timeout_sec=${{ inputs.request-timeout }}
        set +e
        set -o pipefail

        test-requester -busytimeout ${timeout_sec} ${{ inputs.mqtt-broker-url }} ${{ inputs.master-topic }} request.json | tee output.txt; rc=$?;
        set -e
        if [[ $rc == 1 ]]; then
          echo "ERROR Test Failed"
        elif [[ $rc == 2 ]]; then
          echo "ERROR Test Station Busy"
        elif [[ $rc == 3 ]]; then
          echo "ERROR Request Invalid"
        else
          echo "Test PASS"
        fi
        echo "EXIT_CODE=$rc" >> $GITHUB_ENV
        exit $rc

    - name: Download file from MinIO
      if: env.EXIT_CODE == '1'
      env:
        MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
        MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y s3cmd

        cat > ~/.s3cfg <<EOF
        [default]
        access_key = $MINIO_ACCESS_KEY
        secret_key = $MINIO_SECRET_KEY
        host_base = minio.ci4rail.com
        host_bucket = minio.ci4rail.com
        use_https = True
        signature_v2 = False
        EOF

        URL=$(cat output.txt | awk '/LOG_URL: /{print $2}')
        echo "S3 URL: $URL"
        mkdir -p results
        s3cmd get $URL results/

    - name: Upload test results
      if: env.EXIT_CODE == '1'
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: results/*
        retention-days: 90