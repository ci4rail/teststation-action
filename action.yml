name: "Teststation test"
description: "Run a test on test station"
inputs:
  pipeline-name:
    description: "A name identifying the calling pipeline"
    required: true
  mqtt-broker-url:
    description: "IP:Port of MQTT broker where test station listens to"
    required: true
  master-topic:
    description: "request is published to <master-topic>/request"
    required: false
    default: "teststation"
  test-name:
    description: "Name of the test to execute (as listed in the schedulers config file)"
    required: true
  artifact-override:
    description: "artifact to test"
    required: true
  request-timeout:
    description: "Time in seconds to wait for teststation to become available"
    required: false
    default: "3600"
  access-token:
    description: "Personal access token for private repos"
    required: true
  tailscale-key:
    description: "a reusable & emphermeral yoda tailscale key"
    required: true
  requester-version:
    description: "tag of requester to use"
    required: false
    default: "v1.2.5"

runs:
  using: "composite"
  steps:
    # Add action's path so that scripts can be found
    - run: echo "${{ github.action_path }}" >> $GITHUB_PATH
      shell: bash
    - name: fetch requester
      uses: dsaltares/fetch-gh-release-asset@master
      with:
        repo: "ci4rail/test-scheduler"
        version: "tags/${{ inputs.requester-version }}"
        file: "test-requester-${{ inputs.requester-version }}-linux-amd64.tar.gz"
        token: ${{ inputs.access-token }}
    - name: Tailscale
      uses: tailscale/github-action@v1
      with:
        authkey: ${{ inputs.tailscale-key }}
    - name: Execute Request
      shell: bash
      run: |
        generate-request.py "${{ inputs.pipeline-name }}" "${{ inputs.test-name }}" "${{ inputs.artifact-override }}" > request.json
        cat request.json
        tar xzf test-requester-${{ inputs.requester-version }}-linux-amd64.tar.gz test-requester
        chmod +x test-requester && mv test-requester "${{ github.action_path }}"

        timeout_sec=${{ inputs.request-timeout }}
        start_time="$(date -u +%s)"

        while true; do
            set +e
            test-requester ${{ inputs.mqtt-broker-url }} github-${{ github.run_id }} ${{ inputs.master-topic }} request.json 
            status=$?
            set -e
            if [ ${status} = 0 ]; then
                break
            fi
            if [ ${status} != 2 ]; then
                exit 1
            fi
            current_time="$(date -u +%s)"
            elapsed_seconds=$((${current_time}-${start_time}))
            if [ ${elapsed_seconds} -gt ${timeout_sec} ]; then
                echo "timeout waiting for test station"
                exit 1
            fi
            echo "waiting since ${elapsed_seconds} seconds for test station"
            sleep 20
        done
        echo "ok"
